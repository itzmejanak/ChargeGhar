when you change .env file
-------------------------------------------------------------------------------
docker-compose up -d --force-recreate



docker-compose logs migrations --follow
docker-compose up -d migrations
docker-compose up -d
docker-compose build migrations
docker-compose run --rm migrations python manage.py makemigrations <appname>
docker-compose up migrations
docker-compose run --rm migrations python manage.py check
docker-compose run --rm migrations python manage.py check --deploy
docker-compose run --rm migrations python manage.py createsuperuser --username admin --email admin@example.com --noinput  
docker-compose up -d api
docker-compose logs api --tail=20
docker-compose ps
docker-compose restart api

docker-compose run --rm migrations python -c "import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'api.config.settings'); import django; django.setup(); from django.contrib.auth import get_user_model; User = get_user_model(); user = User.objects.get(username='janak'); user.set_password('5060'); user.save(); print('Password set successfully')"
docker-compose run --rm migrations python manage.py flush --noinput


docker-compose run --rm migrations python manage.py shell -c "from api.stations.models import Station; print('Existing stations:'); [print(f'- {s.station_name} ({s.serial_number})') for s in Station.objects.all()]"
docker-compose run --rm migrations python manage.py shell -c "from api.stations.models import Station; [print(f'{s.station_name}: {s.id}') for s in Station.objects.all()]"
docker-compose run --rm migrations python manage.py 
shell -c "from api.stations.models import *; print('Amenities:', [a.name for a in StationAmenity.objects.all()]); print('Slots:', StationSlot.objects.count()); print('PowerBanks:', PowerBank.objects.count())"

docker-compose run --rm migrations python manage.py loaddata api/notifications/fixtures/notifications.json

docker-compose exec api python manage.py makemigrations points
docker-compose exec api python manage.py check --deploy
docker-compose exec api python manage.py spectacular --color --file schema.yml
docker-compose exec api uv sync

docker-compose uv run manage.py loaddata api/notifications/fixtures/notifications.json

docker-compose exec api python manage.py migrate



# Git Related Commands 

git branch --show-current
git branch -a
git pull origin rohan
git push origin main







cd /opt/powerbank

# Stash local changes and pull latest
git stash
git pull origin main

# The script will now work perfectly
chmod +x deploy-production.sh
./deploy-production.sh






netstat -tlnp | grep :8010
# Kill the docker-proxy processes using the port
kill -9 209593 209601

# Check if there are any containers still running
docker ps -a

# Stop all old local containers
docker stop powerbank_local-powerbank_api-1
docker stop powerbank_local-powerbank_celery-1
docker stop powerbank_local-powerbank_collectstatic-1
docker stop powerbank_local-powerbank_migrations-1
docker stop powerbank_local-powerbank_pgbouncer-1
docker stop powerbank_local-powerbank_db-1
docker stop powerbank_local-powerbank_redis-1
docker stop powerbank_local-powerbank_rabbitmq-1

# Remove the old containers
docker rm powerbank_local-powerbank_api-1
docker rm powerbank_local-powerbank_celery-1
docker rm powerbank_local-powerbank_collectstatic-1
docker rm powerbank_local-powerbank_migrations-1
docker rm powerbank_local-powerbank_pgbouncer-1
docker rm powerbank_local-powerbank_db-1
docker rm powerbank_local-powerbank_redis-1
docker rm powerbank_local-powerbank_rabbitmq-1

# Clean up networks and volumes from the old deployment
docker network prune -f
docker volume prune -f

# Verify port 8010 is free
netstat -tlnp | grep :8010 || echo "Port 8010 is free"


./deploy-production.sh




