"""
Service for admin analytics
============================================================

This module contains service classes for service for admin analytics.

Auto-generated by Service Separator
Date: 2025-10-18 23:39:20
"""
from __future__ import annotations
from typing import Dict, Any
from decimal import Decimal
from django.utils import timezone
from django.db.models import Sum
from api.common.services.base import BaseService
from api.users.models import User
from api.stations.models import Station, StationIssue
from api.payments.models import Transaction
from api.rentals.models import Rental

class AdminAnalyticsService(BaseService):
    """Service for admin analytics"""
    
    def get_dashboard_analytics(self) -> Dict[str, Any]:
        """Get comprehensive dashboard analytics"""
        try:
            now = timezone.now()
            today_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
            month_start = today_start.replace(day=1)
            
            # User metrics
            total_users = User.objects.count()
            active_users = User.objects.filter(status='ACTIVE').count()
            new_users_today = User.objects.filter(date_joined__gte=today_start).count()
            new_users_this_month = User.objects.filter(date_joined__gte=month_start).count()
            
            # Rental metrics
            total_rentals = Rental.objects.count()
            active_rentals = Rental.objects.filter(status__in=['ACTIVE', 'PENDING']).count()
            completed_rentals_today = Rental.objects.filter(
                status='COMPLETED',
                ended_at__gte=today_start
            ).count()
            overdue_rentals = Rental.objects.filter(status='OVERDUE').count()
            
            # Revenue metrics
            total_revenue = Transaction.objects.filter(
                status='SUCCESS'
            ).aggregate(total=Sum('amount'))['total'] or Decimal('0')
            
            revenue_today = Transaction.objects.filter(
                status='SUCCESS',
                created_at__gte=today_start
            ).aggregate(total=Sum('amount'))['total'] or Decimal('0')
            
            revenue_this_month = Transaction.objects.filter(
                status='SUCCESS',
                created_at__gte=month_start
            ).aggregate(total=Sum('amount'))['total'] or Decimal('0')
            
            # Station metrics
            total_stations = Station.objects.count()
            online_stations = Station.objects.filter(status='ONLINE').count()
            offline_stations = Station.objects.filter(status='OFFLINE').count()
            maintenance_stations = Station.objects.filter(is_maintenance=True).count()
            
            # System health
            system_health = self._get_system_health()
            
            # Recent issues
            recent_issues = list(StationIssue.objects.filter(
                created_at__gte=today_start,
                status__in=['REPORTED', 'ACKNOWLEDGED']
            ).select_related('station')[:5].values(
                'id', 'issue_type', 'station__station_name', 'created_at'
            ))
            
            return {
                'total_users': total_users,
                'active_users': active_users,
                'new_users_today': new_users_today,
                'new_users_this_month': new_users_this_month,
                'total_rentals': total_rentals,
                'active_rentals': active_rentals,
                'completed_rentals_today': completed_rentals_today,
                'overdue_rentals': overdue_rentals,
                'total_revenue': total_revenue,
                'revenue_today': revenue_today,
                'revenue_this_month': revenue_this_month,
                'total_stations': total_stations,
                'online_stations': online_stations,
                'offline_stations': offline_stations,
                'maintenance_stations': maintenance_stations,
                'system_health': system_health,
                'recent_issues': recent_issues
            }
            
        except Exception as e:
            self.handle_service_error(e, "Failed to get dashboard analytics")
    
    def _get_system_health(self) -> Dict[str, Any]:
        """Get system health metrics"""
        try:
            # Mock system health data
            return {
                'database': 'healthy',
                'redis': 'healthy',
                'celery': 'healthy',
                'storage': 'healthy',
                'response_time_avg': 150.5,
                'error_rate': 0.02,
                'uptime_percentage': 99.9
            }
        except Exception as e:
            self.log_error(f"Failed to get system health: {str(e)}")
            return {}
