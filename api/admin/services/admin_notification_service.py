"""
Service for admin notifications
============================================================

This module contains service classes for service for admin notifications.

Auto-generated by Service Separator
Date: 2025-10-18 23:39:20
"""
from __future__ import annotations
from typing import Dict, Any, List
from django.utils import timezone
from api.common.services.base import BaseService
from api.admin.models import AdminActionLog
from api.users.models import User

class AdminNotificationService(BaseService):
    """Service for admin notifications"""
    
    def send_broadcast_message(self, title: str, message: str, target_audience: str,
                             send_push: bool, send_email: bool, admin_user) -> Dict[str, Any]:
        """Send broadcast message to users"""
        try:
            # Get target users based on audience
            users = self._get_target_users(target_audience)
            
            # Send bulk notification
            from api.notifications.services import notify_bulk
            
            # Send notifications asynchronously
            notify_bulk(
                users,
                'broadcast_message',
                async_send=True,
                title=title,
                message=message,
                send_push=send_push
            )
            
            users_count = len(users)
            
            # Log admin action
            AdminActionLog.objects.create(
                admin_user=admin_user,
                action_type='BROADCAST_MESSAGE',
                target_model='Notification',
                target_id='bulk',
                changes={
                    'title': title,
                    'message': message,
                    'target_audience': target_audience,
                    'send_push': send_push,
                    'send_email': send_email,
                    'users_count': users_count
                },
                description=f"Broadcast message sent to {users_count} users",
                ip_address="127.0.0.1",
                user_agent="Admin Panel"
            )
            
            self.log_info(f"Broadcast message sent by {admin_user.username} to {users_count} users")
            
            # Return serializable data
            return {
                'users_notified': users_count,
                'push_sent': users_count if send_push else 0,
                'email_sent': users_count if send_email else 0,
                'target_audience': target_audience
            }
            
        except Exception as e:
            self.handle_service_error(e, "Failed to send broadcast message")
    
    def _get_target_users(self, target_audience: str) -> List[User]:
        """Get users based on target audience"""
        if target_audience == 'ALL':
            return User.objects.filter(is_active=True)
        elif target_audience == 'ACTIVE':
            return User.objects.filter(is_active=True, status='ACTIVE')
        elif target_audience == 'PREMIUM':
            # Define premium user criteria
            return User.objects.filter(is_active=True, status='ACTIVE')
        elif target_audience == 'NEW':
            thirty_days_ago = timezone.now() - timezone.timedelta(days=30)
            return User.objects.filter(
                is_active=True,
                date_joined__gte=thirty_days_ago
            )
        elif target_audience == 'INACTIVE':
            return User.objects.filter(status='INACTIVE')
        else:
            return User.objects.none()
