"""
Service for admin refund management
============================================================

This module contains service classes for admin refund management operations.
Delegates core refund logic to the payments RefundService for consistency.

Auto-generated by Service Separator
Date: 2025-10-18 23:39:20
"""
from __future__ import annotations
from typing import Dict, Any
from django.db import transaction
from api.common.services.base import CRUDService, ServiceException
from api.admin.models import AdminActionLog
from api.payments.models import Refund
from api.payments.services.refund import RefundService

class AdminRefundService(CRUDService):
    """Service for admin refund management - delegates to core RefundService"""
    model = Refund
    
    def __init__(self):
        super().__init__()
        self.refund_service = RefundService()
    
    def get_pending_refunds(self, filters: Dict[str, Any] = None) -> Dict[str, Any]:
        """Get pending refund requests - delegates to core service"""
        return self.refund_service.get_pending_refunds(filters)
    
    @transaction.atomic
    def process_refund(self, refund_id: str, action: str, admin_notes: str, admin_user) -> Refund:
        """Process refund request (approve/reject) - uses core service with admin logging"""
        try:
            # Validate action
            if action not in ['APPROVE', 'REJECT']:
                raise ServiceException(
                    detail="Invalid action. Must be 'APPROVE' or 'REJECT'",
                    code="invalid_action"
                )
            
            # Delegate to core service
            if action == 'APPROVE':
                refund = self.refund_service.approve_refund(refund_id, admin_user, admin_notes)
            else:  # REJECT
                refund = self.refund_service.reject_refund(refund_id, admin_user, admin_notes)
            
            # Log admin action
            self._log_admin_action(refund, action, admin_notes, admin_user)
            
            # Send notification using clean API
            self._send_refund_notification(refund, action, admin_notes)
            
            return refund
            
        except ServiceException:
            # Re-raise service exceptions from core service
            raise
        except Exception as e:
            self.handle_service_error(e, "Failed to process refund")

    def _log_admin_action(self, refund: Refund, action: str, admin_notes: str, admin_user) -> None:
        """Log admin action for audit trail"""
        try:
            AdminActionLog.objects.create(
                admin_user=admin_user,
                action_type=f'REFUND_{action}',
                target_model='Refund',
                target_id=str(refund.id),
                changes={
                    'action': action,
                    'amount': str(refund.amount),
                    'transaction_id': refund.transaction.transaction_id,
                    'admin_notes': admin_notes
                },
                description=f"Refund {action.lower()}ed",
                ip_address="127.0.0.1",  # TODO: Get actual IP from request
                user_agent="Admin Panel"  # TODO: Get actual user agent from request
            )
        except Exception as e:
            self.log_warning(f"Failed to log admin action: {str(e)}")

    def _send_refund_notification(self, refund: Refund, action: str, admin_notes: str) -> None:
        """Send refund notification to user"""
        try:
            from api.notifications.services import notify
            template_slug = 'refund_approved' if action == 'APPROVE' else 'refund_rejected'
            notify(
                refund.requested_by, 
                template_slug, 
                amount=refund.amount, 
                admin_notes=admin_notes
            )
        except Exception as e:
            self.log_warning(f"Failed to send refund notification: {str(e)}")

    def get_refund_details(self, refund_id: str) -> Refund:
        """Get detailed refund information"""
        return self.refund_service.get_refund_by_id(refund_id)

    def get_refunds_by_status(self, status: str, page: int = 1, page_size: int = 20) -> Dict[str, Any]:
        """Get refunds by status"""
        return self.refund_service.get_refunds_by_status(status, page, page_size)
