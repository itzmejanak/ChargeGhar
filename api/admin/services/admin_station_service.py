"""
Service for admin station management
============================================================

This module contains service classes for service for admin station management.

Auto-generated by Service Separator
Date: 2025-10-18 23:39:20
"""
from __future__ import annotations
from typing import Dict, Any
from django.db import transaction
from django.utils import timezone
from django.db.models import Q
from api.common.services.base import CRUDService, ServiceException
from api.common.utils.helpers import paginate_queryset
from api.admin.models import AdminActionLog
from api.stations.models import Station

class AdminStationService(CRUDService):
    """Service for admin station management"""
    model = Station
    
    def get_stations_list(self, filters: Dict[str, Any] = None) -> Dict[str, Any]:
        """Get paginated list of stations with filters"""
        try:
            queryset = Station.objects.prefetch_related('slots', 'issues')
            
            # Apply filters
            if filters:
                if filters.get('status'):
                    queryset = queryset.filter(status=filters['status'])
                
                if filters.get('search'):
                    search_term = filters['search']
                    queryset = queryset.filter(
                        Q(station_name__icontains=search_term) |
                        Q(serial_number__icontains=search_term) |
                        Q(address__icontains=search_term)
                    )
                
                if filters.get('start_date'):
                    queryset = queryset.filter(created_at__gte=filters['start_date'])
                
                if filters.get('end_date'):
                    queryset = queryset.filter(created_at__lte=filters['end_date'])
            
            # Order by latest first
            queryset = queryset.order_by('-created_at')
            
            # Pagination
            page = filters.get('page', 1) if filters else 1
            page_size = filters.get('page_size', 20) if filters else 20
            
            return paginate_queryset(queryset, page, page_size)
            
        except Exception as e:
            self.handle_service_error(e, "Failed to get stations list")
    
    @transaction.atomic
    def toggle_maintenance_mode(self, station_sn: str, is_maintenance: bool, 
                              reason: str, admin_user) -> Station:
        """Toggle station maintenance mode"""
        try:
            station = Station.objects.get(serial_number=station_sn)
            old_maintenance = station.is_maintenance
            
            station.is_maintenance = is_maintenance
            station.save(update_fields=['is_maintenance', 'updated_at'])
            
            # Log admin action
            AdminActionLog.objects.create(
                admin_user=admin_user,
                action_type='TOGGLE_MAINTENANCE',
                target_model='Station',
                target_id=str(station.id),
                changes={
                    'old_maintenance': old_maintenance,
                    'new_maintenance': is_maintenance,
                    'reason': reason
                },
                description=f"{'Enabled' if is_maintenance else 'Disabled'} maintenance mode",
                ip_address="127.0.0.1",
                user_agent="Admin Panel"
            )
            
            self.log_info(f"Maintenance mode {'enabled' if is_maintenance else 'disabled'} for station: {station.station_name}")
            return station
            
        except Station.DoesNotExist:
            raise ServiceException(
                detail="Station not found",
                code="station_not_found"
            )
        except Exception as e:
            self.handle_service_error(e, "Failed to toggle maintenance mode")
    
    def send_remote_command(self, station_sn: str, command: str, 
                          parameters: Dict[str, Any], admin_user) -> Dict[str, Any]:
        """Send remote command to station"""
        try:
            station = Station.objects.get(serial_number=station_sn)
            
            if station.status != 'ONLINE':
                raise ServiceException(
                    detail="Station must be online to receive commands",
                    code="station_offline"
                )
            
            # Create command payload
            command_payload = {
                'command': command,
                'parameters': parameters,
                'timestamp': timezone.now().isoformat(),
                'admin_user': admin_user.username
            }
            
            # Send command via MQTT (mock implementation)
            success = self._send_mqtt_command(station.imei, command_payload)
            
            # Log admin action
            AdminActionLog.objects.create(
                admin_user=admin_user,
                action_type='REMOTE_COMMAND',
                target_model='Station',
                target_id=str(station.id),
                changes={
                    'command': command,
                    'parameters': parameters,
                    'success': success
                },
                description=f"Sent remote command: {command}",
                ip_address="127.0.0.1",
                user_agent="Admin Panel"
            )
            
            self.log_info(f"Remote command sent to station: {station.station_name} - {command}")
            
            return {
                'command': command,
                'station_name': station.station_name,
                'success': success,
                'message': 'Command sent successfully' if success else 'Command failed to send'
            }
            
        except Station.DoesNotExist:
            raise ServiceException(
                detail="Station not found",
                code="station_not_found"
            )
        except Exception as e:
            self.handle_service_error(e, "Failed to send remote command")
    
    def _send_mqtt_command(self, imei: str, command_payload: Dict[str, Any]) -> bool:
        """Send MQTT command to station (mock implementation)"""
        try:
            # This would integrate with actual MQTT broker
            # For now, return True as mock success
            return True
        except Exception as e:
            self.log_error(f"MQTT command failed: {str(e)}")
            return False
