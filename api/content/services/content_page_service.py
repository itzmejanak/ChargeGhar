"""
Service for content page operations
============================================================

This module contains service classes for service for content page operations.

Auto-generated by Service Separator
Date: 2025-10-18 23:29:38
"""
from __future__ import annotations

from __future__ import annotations
from django.db import transaction
from django.core.cache import cache
from api.common.services.base import CRUDService, ServiceException
from api.content.models import ContentPage

# Additional imports for this module

class ContentPageService(CRUDService):
    """Service for content page operations"""
    model = ContentPage
    
    def get_page_by_type(self, page_type: str) -> ContentPage:
        """Get content page by type - caching handled by view decorator"""
        try:
            page = ContentPage.objects.get(page_type=page_type, is_active=True)
            return page
            
        except ContentPage.DoesNotExist:
            raise ServiceException(
                detail=f"Content page '{page_type}' not found",
                code="page_not_found"
            )
        except Exception as e:
            self.handle_service_error(e, "Failed to get content page")
    
    @transaction.atomic
    def update_page_content(self, page_type: str, title: str, content: str, admin_user) -> ContentPage:
        """Update content page"""
        try:
            page, created = ContentPage.objects.get_or_create(
                page_type=page_type,
                defaults={'title': title, 'content': content, 'is_active': True}
            )
            
            if not created:
                page.title = title
                page.content = content
                page.save(update_fields=['title', 'content', 'updated_at'])
            
            # Clear cache
            cache_key = f"content_page:{page_type}"
            cache.delete(cache_key)
            
            # Log admin action
            from api.admin.models import AdminActionLog
            AdminActionLog.objects.create(
                admin_user=admin_user,
                action_type='UPDATE_CONTENT_PAGE',
                target_model='ContentPage',
                target_id=str(page.id),
                changes={'page_type': page_type, 'title': title},
                description=f"Updated content page: {page_type}",
                ip_address="127.0.0.1",
                user_agent="Admin Panel"
            )
            
            self.log_info(f"Content page updated: {page_type}")
            return page
            
        except Exception as e:
            self.handle_service_error(e, "Failed to update content page")
