"""
Service for banner operations
============================================================

This module contains service classes for service for banner operations.

Auto-generated by Service Separator
Date: 2025-10-18 23:29:38
"""
from __future__ import annotations

from __future__ import annotations
from typing import Dict, Any, List, Optional
from django.db import transaction
from django.utils import timezone
from django.db.models import Q, Count
from django.core.cache import cache
import logging
from api.common.services.base import BaseService, CRUDService, ServiceException
from api.common.utils.helpers import paginate_queryset
from api.content.models import ContentPage, FAQ, ContactInfo, Banner

class BannerService(CRUDService):
    """Service for banner operations"""
    model = Banner
    
    def get_active_banners(self) -> List[Banner]:
        """Get currently active banners - caching handled by view decorator"""
        try:
            now = timezone.now()
            banners = Banner.objects.filter(
                is_active=True,
                valid_from__lte=now,
                valid_until__gte=now
            ).order_by('display_order', '-created_at')
            
            return banners
            
        except Exception as e:
            self.handle_service_error(e, "Failed to get active banners")
    
    @transaction.atomic
    def create_banner(self, title: str, description: str, image_url: str,
                     redirect_url: str, valid_from: timezone.datetime,
                     valid_until: timezone.datetime, admin_user) -> Banner:
        """Create new banner - cache invalidation handled by view decorator"""
        try:
            # Get next display order
            max_order = Banner.objects.aggregate(
                max_order=Count('display_order')
            )['max_order'] or 0
            
            banner = Banner.objects.create(
                title=title,
                description=description,
                image_url=image_url,
                redirect_url=redirect_url,
                display_order=max_order + 1,
                valid_from=valid_from,
                valid_until=valid_until
            )
            
            self.log_info(f"Banner created: {title}")
            return banner
            
        except Exception as e:
            self.handle_service_error(e, "Failed to create banner")
