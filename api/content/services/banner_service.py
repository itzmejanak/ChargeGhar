"""
Service for banner operations
============================================================

This module contains service classes for service for banner operations.

Auto-generated by Service Separator
Date: 2025-10-18 23:29:38
"""
from __future__ import annotations

from typing import List
from django.db import transaction
from django.utils import timezone
from django.db.models import Count
from api.common.services.base import CRUDService
from api.content.models import Banner

class BannerService(CRUDService):
    """Service for banner operations"""
    model = Banner
    
    def get_all(self):
        """Get all banners for admin"""
        try:
            return Banner.objects.all().order_by('display_order', '-created_at')
        except Exception as e:
            self.handle_service_error(e, "Failed to get all banners")
    
    def get_by_id(self, banner_id: str):
        """Get banner by ID"""
        try:
            return Banner.objects.get(id=banner_id)
        except Banner.DoesNotExist:
            from api.common.services.base import ServiceException
            raise ServiceException(
                detail="Banner not found",
                code="banner_not_found"
            )
        except Exception as e:
            self.handle_service_error(e, "Failed to get banner")
    
    def delete_by_id(self, banner_id: str):
        """Delete banner by ID"""
        try:
            banner = Banner.objects.get(id=banner_id)
            banner.delete()
            self.log_info(f"Banner deleted: {banner_id}")
            return True
        except Banner.DoesNotExist:
            from api.common.services.base import ServiceException
            raise ServiceException(
                detail="Banner not found",
                code="banner_not_found"
            )
        except Exception as e:
            self.handle_service_error(e, "Failed to delete banner")
    
    def get_active_banners(self) -> List[Banner]:
        """Get currently active banners - caching handled by view decorator"""
        try:
            now = timezone.now()
            banners = Banner.objects.filter(
                is_active=True,
                valid_from__lte=now,
                valid_until__gte=now
            ).order_by('display_order', '-created_at')
            
            return banners
            
        except Exception as e:
            self.handle_service_error(e, "Failed to get active banners")
    
    @transaction.atomic
    def create_banner(self, title: str, description: str, image_url: str,
                     redirect_url: str, valid_from: timezone.datetime,
                     valid_until: timezone.datetime, admin_user) -> Banner:
        """Create new banner - cache invalidation handled by view decorator"""
        try:
            # Get next display order
            max_order = Banner.objects.aggregate(
                max_order=Count('display_order')
            )['max_order'] or 0
            
            banner = Banner.objects.create(
                title=title,
                description=description,
                image_url=image_url,
                redirect_url=redirect_url,
                display_order=max_order + 1,
                valid_from=valid_from,
                valid_until=valid_until
            )
            
            self.log_info(f"Banner created: {title}")
            return banner
            
        except Exception as e:
            self.handle_service_error(e, "Failed to create banner")
    
    @transaction.atomic
    def update_banner(self, banner_id: str, title: str, description: str, 
                     image_url: str, redirect_url: str, valid_from: timezone.datetime,
                     valid_until: timezone.datetime) -> Banner:
        """Update existing banner"""
        try:
            banner = Banner.objects.get(id=banner_id)
            
            banner.title = title
            banner.description = description
            banner.image_url = image_url
            banner.redirect_url = redirect_url
            banner.valid_from = valid_from
            banner.valid_until = valid_until
            banner.save(update_fields=[
                'title', 'description', 'image_url', 'redirect_url',
                'valid_from', 'valid_until', 'updated_at'
            ])
            
            self.log_info(f"Banner updated: {banner_id}")
            return banner
            
        except Banner.DoesNotExist:
            from api.common.services.base import ServiceException
            raise ServiceException(
                detail="Banner not found",
                code="banner_not_found"
            )
        except Exception as e:
            self.handle_service_error(e, "Failed to update banner")
