"""
Service for contact information operations
============================================================

This module contains service classes for service for contact information operations.

Auto-generated by Service Separator
Date: 2025-10-18 23:29:38
"""
from __future__ import annotations

import logging
from typing import List
from django.db import transaction
from api.common.services.base import CRUDService
from api.content.models import ContactInfo

logger = logging.getLogger(__name__)

class ContactInfoService(CRUDService):
    """Service for contact information operations"""
    model = ContactInfo
    
    def get_all(self):
        """Get all contact info for admin"""
        try:
            return ContactInfo.objects.all().order_by('info_type')
        except Exception as e:
            self.handle_service_error(e, "Failed to get all contact info")
    
    def get_by_id(self, contact_id: str):
        """Get contact info by ID"""
        try:
            return ContactInfo.objects.get(id=contact_id)
        except ContactInfo.DoesNotExist:
            from api.common.services.base import ServiceException
            raise ServiceException(
                detail="Contact info not found",
                code="contact_not_found"
            )
        except Exception as e:
            self.handle_service_error(e, "Failed to get contact info")
    
    def delete_by_id(self, contact_id: str):
        """Delete contact info by ID"""
        try:
            contact_info = ContactInfo.objects.get(id=contact_id)
            contact_info.delete()
            self.log_info(f"Contact info deleted: {contact_id}")
            return True
        except ContactInfo.DoesNotExist:
            from api.common.services.base import ServiceException
            raise ServiceException(
                detail="Contact info not found",
                code="contact_not_found"
            )
        except Exception as e:
            self.handle_service_error(e, "Failed to delete contact info")
    
    def get_all_contact_info(self) -> List[ContactInfo]:
        """Get all active contact information - caching handled by view decorator"""
        try:
            contact_info = ContactInfo.objects.filter(is_active=True).order_by('info_type')
            logger.debug(f"Found {contact_info.count()} active contact info records")
            
            return contact_info
            
        except Exception as e:
            self.handle_service_error(e, "Failed to get contact information")
    
    @transaction.atomic
    def update_contact_info(self, info_type: str, label: str, value: str, 
                          description: str, admin_user) -> ContactInfo:
        """Update contact information - cache invalidation handled by view decorator"""
        try:
            contact_info, created = ContactInfo.objects.get_or_create(
                info_type=info_type,
                defaults={
                    'label': label,
                    'value': value,
                    'description': description,
                    'updated_by': admin_user
                }
            )
            
            if not created:
                contact_info.label = label
                contact_info.value = value
                contact_info.description = description
                contact_info.updated_by = admin_user
                contact_info.save(update_fields=['label', 'value', 'description', 'updated_by', 'updated_at'])
            
            self.log_info(f"Contact info updated: {info_type}")
            return contact_info
            
        except Exception as e:
            self.handle_service_error(e, "Failed to update contact information")
