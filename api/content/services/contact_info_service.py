"""
Service for contact information operations
============================================================

This module contains service classes for service for contact information operations.

Auto-generated by Service Separator
Date: 2025-10-18 23:29:38
"""
from __future__ import annotations

from __future__ import annotations
from typing import Dict, Any, List, Optional
from django.db import transaction
from django.utils import timezone
from django.db.models import Q, Count
from django.core.cache import cache
import logging
from api.common.services.base import BaseService, CRUDService, ServiceException
from api.common.utils.helpers import paginate_queryset
from api.content.models import ContentPage, FAQ, ContactInfo, Banner

class ContactInfoService(CRUDService):
    """Service for contact information operations"""
    model = ContactInfo
    
    def get_all_contact_info(self) -> List[ContactInfo]:
        """Get all active contact information - caching handled by view decorator"""
        try:
            contact_info = ContactInfo.objects.filter(is_active=True).order_by('info_type')
            logger.debug(f"Found {contact_info.count()} active contact info records")
            
            return contact_info
            
        except Exception as e:
            self.handle_service_error(e, "Failed to get contact information")
    
    @transaction.atomic
    def update_contact_info(self, info_type: str, label: str, value: str, 
                          description: str, admin_user) -> ContactInfo:
        """Update contact information - cache invalidation handled by view decorator"""
        try:
            contact_info, created = ContactInfo.objects.get_or_create(
                info_type=info_type,
                defaults={
                    'label': label,
                    'value': value,
                    'description': description,
                    'updated_by': admin_user
                }
            )
            
            if not created:
                contact_info.label = label
                contact_info.value = value
                contact_info.description = description
                contact_info.updated_by = admin_user
                contact_info.save(update_fields=['label', 'value', 'description', 'updated_by', 'updated_at'])
            
            self.log_info(f"Contact info updated: {info_type}")
            return contact_info
            
        except Exception as e:
            self.handle_service_error(e, "Failed to update contact information")
