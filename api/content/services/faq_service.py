"""
Service for FAQ operations
============================================================

This module contains service classes for service for faq operations.

Auto-generated by Service Separator
Date: 2025-10-18 23:29:38
"""
from __future__ import annotations

from typing import Dict, List
from django.db import transaction
from django.db.models import Q, Count
from api.common.services.base import CRUDService, ServiceException
from api.content.models import FAQ

class FAQService(CRUDService):
    """Service for FAQ operations"""
    model = FAQ
    
    def get_all(self):
        """Get all FAQs for admin"""
        try:
            return FAQ.objects.all().order_by('category', 'sort_order')
        except Exception as e:
            self.handle_service_error(e, "Failed to get all FAQs")
    
    def get_by_id(self, faq_id: str):
        """Get FAQ by ID"""
        try:
            return FAQ.objects.get(id=faq_id)
        except FAQ.DoesNotExist:
            from api.common.services.base import ServiceException
            raise ServiceException(
                detail="FAQ not found",
                code="faq_not_found"
            )
        except Exception as e:
            self.handle_service_error(e, "Failed to get FAQ")
    
    def delete_by_id(self, faq_id: str):
        """Delete FAQ by ID"""
        try:
            faq = FAQ.objects.get(id=faq_id)
            faq.delete()
            self.log_info(f"FAQ deleted: {faq_id}")
            return True
        except FAQ.DoesNotExist:
            from api.common.services.base import ServiceException
            raise ServiceException(
                detail="FAQ not found",
                code="faq_not_found"
            )
        except Exception as e:
            self.handle_service_error(e, "Failed to delete FAQ")
    
    def get_faqs_by_category(self) -> Dict[str, List[FAQ]]:
        """Get FAQs grouped by category - caching handled by view decorator"""
        try:
            faqs = FAQ.objects.filter(is_active=True).order_by('category', 'sort_order')
            
            # Group by category
            faqs_by_category = {}
            for faq in faqs:
                if faq.category not in faqs_by_category:
                    faqs_by_category[faq.category] = []
                faqs_by_category[faq.category].append(faq)
            
            return faqs_by_category
            
        except Exception as e:
            self.handle_service_error(e, "Failed to get FAQs by category")
    
    def search_faqs(self, query: str) -> List[FAQ]:
        """Search FAQs by question or answer"""
        try:
            return FAQ.objects.filter(
                Q(question__icontains=query) | Q(answer__icontains=query),
                is_active=True
            ).order_by('category', 'sort_order')
        except Exception as e:
            self.handle_service_error(e, "Failed to search FAQs")
    
    @transaction.atomic
    def create_faq(self, question: str, answer: str, category: str, admin_user) -> FAQ:
        """Create new FAQ - cache invalidation handled by view decorator"""
        try:
            # Get next sort order for category
            max_order = FAQ.objects.filter(category=category).aggregate(
                max_order=Count('sort_order')
            )['max_order'] or 0
            
            faq = FAQ.objects.create(
                question=question,
                answer=answer,
                category=category,
                sort_order=max_order + 1,
                created_by=admin_user,
                updated_by=admin_user
            )
            
            self.log_info(f"FAQ created: {question[:50]}...")
            return faq
            
        except Exception as e:
            self.handle_service_error(e, "Failed to create FAQ")
    
    @transaction.atomic
    def update_faq(self, faq_id: str, question: str, answer: str, category: str, admin_user) -> FAQ:
        """Update existing FAQ - cache invalidation handled by view decorator"""
        try:
            faq = FAQ.objects.get(id=faq_id)
            
            faq.question = question
            faq.answer = answer
            faq.category = category
            faq.updated_by = admin_user
            faq.save(update_fields=['question', 'answer', 'category', 'updated_by', 'updated_at'])
            
            self.log_info(f"FAQ updated: {faq_id}")
            return faq
            
        except FAQ.DoesNotExist:
            raise ServiceException(
                detail="FAQ not found",
                code="faq_not_found"
            )
        except Exception as e:
            self.handle_service_error(e, "Failed to update FAQ")
