"""
Service for AppConfig operations
============================================================

This module contains service classes for service for appconfig operations.

Auto-generated by Service Separator
Date: 2025-10-18 23:47:47
"""
from __future__ import annotations

from typing import Any, Dict
from django.core.cache import cache
from api.common.services.base import CRUDService
from api.system.models import AppConfig

class AppConfigService(CRUDService):
    """Service for AppConfig operations"""
    model = AppConfig
    
    def get_config(self, key: str, default: Any = None) -> Any:
        """Get configuration value by key"""
        try:
            config = self.model.objects.get(key=key, is_active=True)
            return config.value
        except self.model.DoesNotExist:
            return default
    
    def set_config(self, key: str, value: str, description: str = None) -> AppConfig:
        """Set configuration value"""
        try:
            config, created = self.model.objects.update_or_create(
                key=key,
                defaults={
                    'value': str(value),
                    'description': description,
                    'is_active': True
                }
            )
            
            # Clear cache for this config
            cache.delete(f"app_config_{key}")
            
            action = "created" if created else "updated"
            self.log_info(f"Configuration {key} {action}")
            
            return config
            
        except Exception as e:
            self.handle_service_error(e, f"Failed to set config {key}")
    
    def get_config_cached(self, key: str, default: Any = None, timeout: int = 3600) -> Any:
        """Get configuration value with caching"""
        cache_key = f"app_config_{key}"
        value = cache.get(cache_key)
        
        if value is None:
            value = self.get_config(key, default)
            cache.set(cache_key, value, timeout)
        
        return value
    
    def get_public_configs(self) -> Dict[str, str]:
        """Get all public (non-sensitive) configurations"""
        sensitive_keywords = ['secret', 'password', 'key', 'token', 'url']
        
        configs = self.model.objects.filter(is_active=True)
        public_configs = {}
        
        for config in configs:
            if not any(keyword in config.key.lower() for keyword in sensitive_keywords):
                public_configs[config.key] = config.value
        
        return public_configs
