"""
Service for AppVersion operations
============================================================

This module contains service classes for app version management.

Auto-generated by Service Separator
Date: 2025-10-30
"""
from __future__ import annotations

from typing import Dict, Any, Optional
from packaging import version as version_parser
from api.common.services.base import CRUDService, ServiceException
from api.system.models import AppVersion

class AppVersionService(CRUDService):
    """Service for AppVersion operations"""
    model = AppVersion
    
    def get_latest_version(self, platform: str) -> Optional[AppVersion]:
        """Get the latest version for a platform"""
        try:
            return self.model.objects.filter(platform=platform).first()
        except Exception as e:
            self.log_error(f"Failed to get latest version for {platform}: {str(e)}")
            return None
    
    def check_version_update(self, platform: str, current_version: str) -> Dict[str, Any]:
        """Check if an update is available for the current version"""
        try:
            latest_version = self.get_latest_version(platform)
            
            if not latest_version:
                return {
                    'update_available': False,
                    'is_mandatory': False,
                    'latest_version': current_version,
                    'download_url': None,
                    'release_notes': None,
                    'current_version': current_version
                }
            
            # Compare versions
            current_parsed = version_parser.parse(current_version)
            latest_parsed = version_parser.parse(latest_version.version)
            
            update_available = latest_parsed > current_parsed
            
            return {
                'update_available': update_available,
                'is_mandatory': latest_version.is_mandatory if update_available else False,
                'latest_version': latest_version.version,
                'download_url': latest_version.download_url if update_available else None,
                'release_notes': latest_version.release_notes if update_available else None,
                'current_version': current_version
            }
            
        except Exception as e:
            self.log_error(f"Failed to check version update: {str(e)}")
            return {
                'update_available': False,
                'is_mandatory': False,
                'latest_version': current_version,
                'download_url': None,
                'release_notes': None,
                'current_version': current_version
            }
    
    def create_version(self, version_data: Dict[str, Any], admin_user=None) -> AppVersion:
        """Create new app version (Admin)"""
        try:
            version = self.model.objects.create(**version_data)
            
            # Log admin action if provided
            if admin_user:
                from api.admin.models import AdminActionLog
                AdminActionLog.objects.create(
                    admin_user=admin_user,
                    action_type='CREATE_APP_VERSION',
                    target_model='AppVersion',
                    target_id=str(version.id),
                    changes=version_data,
                    description=f"Created app version: {version.platform} v{version.version}",
                    ip_address="127.0.0.1",
                    user_agent="Admin Panel"
                )
            
            self.log_info(f"App version created: {version.platform} v{version.version}")
            return version
            
        except Exception as e:
            self.handle_service_error(e, "Failed to create app version")
    
    def update_version(self, version_id: str, version_data: Dict[str, Any], admin_user=None) -> AppVersion:
        """Update app version (Admin)"""
        try:
            version = self.model.objects.get(id=version_id)
            old_data = {
                'version': version.version,
                'platform': version.platform,
                'is_mandatory': version.is_mandatory
            }
            
            for key, value in version_data.items():
                setattr(version, key, value)
            version.save()
            
            # Log admin action if provided
            if admin_user:
                from api.admin.models import AdminActionLog
                AdminActionLog.objects.create(
                    admin_user=admin_user,
                    action_type='UPDATE_APP_VERSION',
                    target_model='AppVersion',
                    target_id=str(version.id),
                    changes={
                        'old_data': old_data,
                        'new_data': version_data
                    },
                    description=f"Updated app version: {version.platform} v{version.version}",
                    ip_address="127.0.0.1",
                    user_agent="Admin Panel"
                )
            
            self.log_info(f"App version updated: {version.platform} v{version.version}")
            return version
            
        except self.model.DoesNotExist:
            raise ServiceException("App version not found", code="version_not_found")
        except Exception as e:
            self.handle_service_error(e, "Failed to update app version")