"""
Service for AppVersion operations
============================================================

This module contains service classes for service for appversion operations.

Auto-generated by Service Separator
Date: 2025-10-18 23:47:47
"""
from __future__ import annotations

from typing import Any, Dict, Optional
from packaging import version as version_parser
from api.common.services.base import CRUDService, ServiceException
from api.system.models import AppVersion

class AppVersionService(CRUDService):
    """Service for AppVersion operations"""
    model = AppVersion
    
    def get_latest_version(self, platform: str) -> Optional[AppVersion]:
        """Get the latest version for a platform"""
        try:
            return self.model.objects.filter(platform=platform).first()
        except self.model.DoesNotExist:
            return None
    
    def check_version_update(self, platform: str, current_version: str) -> Dict[str, Any]:
        """Check if app update is available"""
        try:
            latest_version = self.get_latest_version(platform)
            
            if not latest_version:
                return {
                    'update_available': False,
                    'is_mandatory': False,
                    'latest_version': current_version,
                    'download_url': None,
                    'release_notes': None,
                    'current_version': current_version
                }
            
            # Compare versions
            update_available = version_parser.parse(latest_version.version) > version_parser.parse(current_version)
            
            return {
                'update_available': update_available,
                'is_mandatory': latest_version.is_mandatory if update_available else False,
                'latest_version': latest_version.version,
                'download_url': latest_version.download_url if update_available else None,
                'release_notes': latest_version.release_notes if update_available else None,
                'current_version': current_version
            }
            
        except Exception as e:
            self.handle_service_error(e, "Failed to check version update")
    
    def create_version(self, version_data: Dict[str, Any]) -> AppVersion:
        """Create new app version"""
        try:
            # Ensure this version doesn't already exist
            if self.model.objects.filter(
                version=version_data['version'], 
                platform=version_data['platform']
            ).exists():
                raise ServiceException(
                    detail=f"Version {version_data['version']} already exists for {version_data['platform']}",
                    code="version_exists"
                )
            
            app_version = self.model.objects.create(**version_data)
            self.log_info(f"New app version created: {app_version}")
            
            return app_version
            
        except Exception as e:
            self.handle_service_error(e, "Failed to create app version")
