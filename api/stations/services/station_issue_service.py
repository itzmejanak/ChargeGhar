"""
Service for station issues
============================================================

This module contains service classes for service for station issues.

Auto-generated by Service Separator
Date: 2025-10-18 23:01:23
"""
from __future__ import annotations

from __future__ import annotations
from typing import Dict, Any
from django.db import transaction
from django.utils import timezone
from api.common.services.base import CRUDService, ServiceException
from api.common.utils.helpers import paginate_queryset
from api.stations.models import (
    Station, StationIssue
)

class StationIssueService(CRUDService):
    """Service for station issues"""
    model = StationIssue
    
    @transaction.atomic
    def report_issue(self, user, station_sn: str, validated_data: Dict[str, Any]) -> StationIssue:
        """Report station issue"""
        try:
            station = Station.objects.get(serial_number=station_sn)
            
            # Check for duplicate recent reports from same user
            recent_issue = StationIssue.objects.filter(
                station=station,
                reported_by=user,
                issue_type=validated_data.get('issue_type'),
                status__in=['REPORTED', 'ACKNOWLEDGED'],
                created_at__gte=timezone.now() - timezone.timedelta(hours=24)
            ).first()
            
            if recent_issue:
                raise ServiceException(
                    detail="You have already reported a similar issue for this station in the last 24 hours",
                    code="duplicate_issue_report"
                )
            
            # Create the issue
            issue = StationIssue.objects.create(
                station=station,
                reported_by=user,
                **validated_data
            )
            
            # Send notification to admin users (async)
            try:
                from api.notifications.services import notify_bulk
                from django.contrib.auth import get_user_model
                
                User = get_user_model()
                admin_users = User.objects.filter(is_staff=True, is_active=True)
                
                # Use the universal notify_bulk method for admin notifications
                notify_bulk(
                    users=admin_users,
                    template_slug='station_issue_reported',
                    async_send=True,  # Send asynchronously to avoid blocking
                    station_name=station.station_name,
                    issue_type=validated_data.get('issue_type'),
                    reporter=user.username,
                    issue_id=str(issue.id)
                )
                
                self.log_info(f"Admin notifications sent for station issue {issue.id}")
                
            except Exception as e:
                # Notification failure shouldn't block the issue creation
                self.log_warning(f"Could not send admin notification for issue {issue.id}: {str(e)}")
            
            self.log_info(f"Issue reported for station: {station.station_name} by {user.username}")
            return issue
            
        except Station.DoesNotExist:
            raise ServiceException(
                detail="Station not found",
                code="station_not_found"
            )
        except ServiceException:
            raise
        except Exception as e:
            self.handle_service_error(e, "Failed to report station issue")
    
# REMOVED: get_station_issues - No corresponding view implemented
    
    def get_user_reported_issues(self, user, page: int = 1, page_size: int = 20) -> Dict[str, Any]:
        """Get issues reported by user"""
        try:
            queryset = StationIssue.objects.filter(
                reported_by=user
            ).select_related('station').order_by('-created_at')
            
            return paginate_queryset(queryset, page, page_size)
            
        except Exception as e:
            self.handle_service_error(e, "Failed to get user reported issues")
