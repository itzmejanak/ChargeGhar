"""
Service for station favorites
============================================================

This module contains service classes for service for station favorites.

Auto-generated by Service Separator
Date: 2025-10-18 23:01:23
"""
from __future__ import annotations

from __future__ import annotations
from typing import Dict, Any
from django.db import transaction
from api.common.services.base import BaseService, ServiceException
from api.common.utils.helpers import paginate_queryset
from api.stations.models import (
    Station, UserStationFavorite
)

class StationFavoriteService(BaseService):
    """Service for station favorites"""
    
    @transaction.atomic
    def toggle_favorite(self, user, station_sn: str) -> Dict[str, Any]:
        """Toggle station favorite status"""
        try:
            station = Station.objects.get(serial_number=station_sn)
            
            favorite = UserStationFavorite.objects.filter(
                user=user,
                station=station
            ).first()
            
            if favorite:
                # Remove from favorites
                favorite.delete()
                self.log_info(f"Station removed from favorites: {user.username} -> {station.station_name}")
                return {
                    'is_favorite': False,
                    'message': 'Station removed from favorites'
                }
            else:
                # Add to favorites
                UserStationFavorite.objects.create(
                    user=user,
                    station=station
                )
                self.log_info(f"Station added to favorites: {user.username} -> {station.station_name}")
                return {
                    'is_favorite': True,
                    'message': 'Station added to favorites'
                }
                
        except Station.DoesNotExist:
            raise ServiceException(
                detail="Station not found",
                code="station_not_found"
            )
        except Exception as e:
            self.handle_service_error(e, "Failed to toggle favorite station")
    
    def get_user_favorites(self, user, page: int = 1, page_size: int = 20) -> Dict[str, Any]:
        """Get user's favorite stations"""
        try:
            # Get favorite stations as queryset with proper ordering
            favorites = UserStationFavorite.objects.filter(
                user=user
            ).select_related('station').order_by('-created_at')
            
            # Get station IDs from favorites to maintain order
            station_ids = list(favorites.values_list('station_id', flat=True))
            
            # Get stations queryset maintaining the favorite order
            stations = Station.objects.filter(id__in=station_ids)
            
            # Preserve the order from favorites
            if station_ids:
                stations = stations.extra(
                    select={'favorite_order': f"array_position(ARRAY{station_ids}::uuid[], id)"},
                    order_by=['favorite_order']
                )
            
            # Apply pagination to queryset
            return paginate_queryset(stations, page, page_size)
            
        except Exception as e:
            self.handle_service_error(e, "Failed to get favorite stations")
