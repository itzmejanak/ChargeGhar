api/notifications/services/
â”œâ”€â”€ __init__.py                    # Exports
â”œâ”€â”€ analytics.py                   # Service operations
â”‚   â””â”€â”€ NotificationAnalyticsService
â”‚       â”œâ”€â”€ get_notification_analytics()
â”‚       â”œâ”€â”€ get_user_engagement_analytics()
â”‚       â””â”€â”€ get_delivery_performance()
â”œâ”€â”€ email.py                       # Service operations
â”‚   â””â”€â”€ EmailService
â”‚       â”œâ”€â”€ __init__()
â”‚       â””â”€â”€ send_email()
â”œâ”€â”€ fcm.py                         # Service operations
â”‚   â””â”€â”€ FCMService
â”‚       â”œâ”€â”€ __init__()
â”‚       â”œâ”€â”€ _initialize_firebase()
â”‚       â”œâ”€â”€ send_push_notification()
â”‚       â””â”€â”€ _send_fcm_message()
â”œâ”€â”€ notification.py                # ðŸ”„ Legacy NotificationService - Backward Compatibility
====================================================

This service provides the legacy API that views and other services expect.
It bridges the gap between old API and new clean notify system.
â”‚   â””â”€â”€ NotificationService
â”‚       â”œâ”€â”€ __init__()
â”‚       â”œâ”€â”€ create_notification()
â”‚       â”œâ”€â”€ get_user_notifications()
â”‚       â”œâ”€â”€ get_notification_stats()
â”‚       â”œâ”€â”€ get_by_id()
â”‚       â”œâ”€â”€ mark_as_read()
â”‚       â”œâ”€â”€ mark_all_as_read()
â”‚       â”œâ”€â”€ delete_notification()
â”‚       â””â”€â”€ _send_via_channels()
â”œâ”€â”€ notify.py                      # ðŸš€ NotifyService - Modern, Clean Notification System
====================================================

Simple, powerful notification system with:
- Template-based notifications
- Auto channel distribution based on rules
- Django template engine support
- Clean, one-line API

Example Usage:
    from api.notifications.services import notify
    
    # Simple one-liner
    notify(user, 'rental_started', powerbank_id='PB123', station_name='Mall Road')
    
    # That's it! The system handles:
    # - Template lookup
    # - Variable substitution
    # - Channel distribution (in-app, push, SMS, email)
    # - Rule-based delivery
â”‚   â””â”€â”€ NotifyService
â”‚       â”œâ”€â”€ __init__()
â”‚       â”œâ”€â”€ email_service()
â”‚       â”œâ”€â”€ fcm_service()
â”‚       â”œâ”€â”€ sms_service()
â”‚       â”œâ”€â”€ send()
â”‚       â”œâ”€â”€ send_bulk()
â”‚       â”œâ”€â”€ send_otp()
â”‚       â”œâ”€â”€ send_custom()
â”‚       â”œâ”€â”€ _get_template()
â”‚       â”œâ”€â”€ _render_template()
â”‚       â”œâ”€â”€ _distribute_channels()
â”‚       â”œâ”€â”€ _send_push()
â”‚       â”œâ”€â”€ _send_sms()
â”‚       â””â”€â”€ _send_email()
â””â”€â”€ sms.py                         # Service operations
    â””â”€â”€ SMSService
        â”œâ”€â”€ send_sms()
        â”œâ”€â”€ _format_phone_number()
        â””â”€â”€ _send_sms_message()

Total: 6 files, 6 service classes, 35 methods