"""
Service for user profile operations
============================================================

This module contains service classes for service for user profile operations.

Auto-generated by Service Separator
Date: 2025-10-18 22:53:34
"""
from __future__ import annotations
from typing import Dict, Any
from django.db import transaction
from api.common.services.base import BaseService
from api.users.models import User, UserProfile, UserPoints

class UserProfileService(BaseService):
    """Service for user profile operations"""
    
    @transaction.atomic
    def update_profile(self, user: User, validated_data: Dict[str, Any]) -> UserProfile:
        """Update user profile"""
        try:
            profile, created = UserProfile.objects.get_or_create(user=user)
            
            # Update profile fields
            for field, value in validated_data.items():
                setattr(profile, field, value)
            
            # Check if profile is complete
            required_fields = ['full_name', 'date_of_birth', 'address']
            was_complete = profile.is_profile_complete if hasattr(profile, 'is_profile_complete') else False
            profile.is_profile_complete = all(
                getattr(profile, field) for field in required_fields
            )
            
            profile.save()
            
            # Award points for profile completion (first time only)
            if profile.is_profile_complete and not was_complete:
                from api.points.services import award_points
                from api.system.services import AppConfigService
                from django.db import transaction
                
                config_service = AppConfigService()
                profile_points = int(config_service.get_config_cached('POINTS_PROFILE', 20))
                
                # Schedule task after transaction commits
                transaction.on_commit(
                    lambda: award_points(user, profile_points, 'PROFILE', 'Profile completed', async_send=True)
                )
            
            # Send profile completion reminder if still incomplete (async)
            elif not profile.is_profile_complete:
                from api.notifications.services import notify
                notify(
                    user,
                    'profile_completion_reminder',
                    async_send=True,
                    completion_percentage=profile.completion_percentage
                )
            
            self.log_info(f"Profile updated for user: {user.username}")
            
            return profile
            
        except Exception as e:
            self.handle_service_error(e, "Failed to update profile")
    
    def get_user_analytics(self, user: User) -> Dict[str, Any]:
        """Get user analytics data"""
        try:
            from api.rentals.models import Rental
            from api.stations.models import UserStationFavorite
            
            # Get rental statistics
            rentals = Rental.objects.filter(user=user)
            total_rentals = rentals.count()
            timely_returns = rentals.filter(is_returned_on_time=True).count()
            late_returns = total_rentals - timely_returns
            
            # Get spending data
            from api.payments.models import Transaction
            transactions = Transaction.objects.filter(
                user=user, 
                status='SUCCESS',
                transaction_type__in=['RENTAL', 'TOPUP']
            )
            total_spent = sum(t.amount for t in transactions)
            
            # Get points data
            try:
                points = user.points
                total_points_earned = points.total_points
            except UserPoints.DoesNotExist:
                total_points_earned = 0
            
            # Get referral count
            total_referrals = User.objects.filter(referred_by=user).count()
            
            # Get favorite stations count
            favorite_stations_count = UserStationFavorite.objects.filter(user=user).count()
            
            # Get last rental date
            last_rental = rentals.order_by('-created_at').first()
            last_rental_date = last_rental.created_at if last_rental else None
            
            return {
                'total_rentals': total_rentals,
                'total_spent': total_spent,
                'total_points_earned': total_points_earned,
                'total_referrals': total_referrals,
                'timely_returns': timely_returns,
                'late_returns': late_returns,
                'favorite_stations_count': favorite_stations_count,
                'last_rental_date': last_rental_date,
                'member_since': user.date_joined
            }
            
        except Exception as e:
            self.handle_service_error(e, "Failed to get user analytics")
