"""
Service for device management
============================================================

This module contains service classes for service for device management.

Auto-generated by Service Separator
Date: 2025-10-18 22:53:34
"""
from __future__ import annotations
from typing import Dict, Any
from django.db import transaction
from api.common.services.base import BaseService
from api.users.models import User, UserDevice

class UserDeviceService(BaseService):
    """Service for device management"""
    
    @transaction.atomic
    def register_device(self, user: User, validated_data: Dict[str, Any]) -> UserDevice:
        """Register or update user device"""
        try:
            device, created = UserDevice.objects.update_or_create(
                user=user,
                device_id=validated_data['device_id'],
                defaults=validated_data
            )
            
            action = "registered" if created else "updated"
            self.log_info(f"Device {action} for user: {user.username}")
            
            return device
            
        except Exception as e:
            self.handle_service_error(e, "Failed to register device")
