"""
Service for KYC operations
============================================================

This module contains service classes for service for kyc operations.

Auto-generated by Service Separator
Date: 2025-10-18 22:53:34
"""
from __future__ import annotations

from __future__ import annotations
import os
import uuid
from typing import Dict, Any, Optional
from decimal import Decimal
from django.db import transaction
from django.utils import timezone
from django.contrib.auth import get_user_model
from django.core.cache import cache
from rest_framework_simplejwt.tokens import RefreshToken
from api.common.services.base import BaseService, ServiceException
from api.common.utils.helpers import (
    generate_random_code, 
    generate_unique_code,
    validate_phone_number,
    get_client_ip
)
from api.users.models import User, UserProfile, UserKYC, UserDevice, UserPoints, UserAuditLog
from api.payments.models import Wallet
from api.notifications.services import notify

# Additional imports for this module
from api.points.services import award_points
from api.system.services import AppConfigService

class UserKYCService(BaseService):
    """Service for KYC operations"""
    
    @transaction.atomic
    def submit_kyc(self, user: User, validated_data: Dict[str, Any]) -> UserKYC:
        """Submit KYC documents"""
        try:
            # Check if KYC already exists
            kyc, created = UserKYC.objects.get_or_create(
                user=user,
                defaults=validated_data
            )
            
            if not created:
                # Update existing KYC
                for field, value in validated_data.items():
                    setattr(kyc, field, value)
                kyc.status = 'PENDING'  # Reset status
                kyc.save()
            
            self.log_info(f"KYC submitted for user: {user.username}")
            
            return kyc
            
        except Exception as e:
            self.handle_service_error(e, "Failed to submit KYC")
    
    def update_kyc_status(self, user: User, status: str, rejection_reason: str = None) -> bool:
        """Update KYC status and send notification"""
        try:
            kyc = UserKYC.objects.get(user=user)
            kyc.status = status
            if rejection_reason:
                kyc.rejection_reason = rejection_reason
            if status == 'APPROVED':
                kyc.verified_at = timezone.now()
                
                # Award KYC completion points (after transaction commits)
                from api.points.services import award_points
                from api.system.services import AppConfigService
                from django.db import transaction
                
                config_service = AppConfigService()
                kyc_points = int(config_service.get_config_cached('POINTS_KYC', 30))
                
                # Schedule task after transaction commits
                transaction.on_commit(
                    lambda: award_points(user, kyc_points, 'KYC', 'KYC verification completed', async_send=True)
                )
                
            kyc.save()
            
            # Send KYC status notification
            notify(
                user,
                'kyc_status_updated',
                async_send=True,
                status=status.lower(),
                rejection_reason=rejection_reason
            )
            
            self.log_info(f"KYC status updated: {user.username} -> {status}")
            return True
            
        except UserKYC.DoesNotExist:
            self.log_error(f"KYC not found for user {user.username}")
            return False
        except Exception as e:
            self.log_error(f"Failed to update KYC status: {str(e)}")
            return False
