"""
Service for promotion analytics
============================================================

This module contains service classes for service for promotion analytics.

Auto-generated by Service Separator
Date: 2025-10-18 23:21:06
"""
from __future__ import annotations

from __future__ import annotations
from typing import Dict, Any
from django.utils import timezone
from django.db.models import Count, Sum
from api.common.services.base import BaseService, ServiceException
from api.promotions.models import Coupon, CouponUsage

class PromotionAnalyticsService(BaseService):
    """Service for promotion analytics"""
    
    def get_coupon_analytics(self) -> Dict[str, Any]:
        """Get comprehensive coupon analytics"""
        try:
            # Basic counts
            total_coupons = Coupon.objects.count()
            active_coupons = Coupon.objects.filter(status=Coupon.StatusChoices.ACTIVE).count()
            expired_coupons = Coupon.objects.filter(status=Coupon.StatusChoices.EXPIRED).count()
            
            # Usage statistics
            total_uses = CouponUsage.objects.count()
            total_points_awarded = CouponUsage.objects.aggregate(
                total=Sum('points_awarded')
            )['total'] or 0
            
            # Most used coupons
            most_used = Coupon.objects.annotate(
                usage_count=Count('usages')
            ).order_by('-usage_count')[:5]
            
            most_used_coupons = [
                {
                    'code': coupon.code,
                    'name': coupon.name,
                    'usage_count': coupon.usage_count,
                    'points_value': coupon.points_value
                }
                for coupon in most_used
            ]
            
            # Daily usage for last 7 days
            daily_usage = []
            for i in range(7):
                date = timezone.now().date() - timezone.timedelta(days=i)
                usage_count = CouponUsage.objects.filter(
                    used_at__date=date
                ).count()
                
                daily_usage.append({
                    'date': date.isoformat(),
                    'usage_count': usage_count
                })
            
            daily_usage.reverse()  # Show oldest to newest
            
            # User engagement
            unique_users = CouponUsage.objects.values('user').distinct().count()
            avg_uses_per_user = total_uses / unique_users if unique_users > 0 else 0
            
            return {
                'total_coupons': total_coupons,
                'active_coupons': active_coupons,
                'expired_coupons': expired_coupons,
                'total_uses': total_uses,
                'total_points_awarded': total_points_awarded,
                'most_used_coupons': most_used_coupons,
                'daily_usage': daily_usage,
                'unique_users': unique_users,
                'average_uses_per_user': round(avg_uses_per_user, 2),
                'last_updated': timezone.now()
            }
            
        except Exception as e:
            self.handle_service_error(e, "Failed to get coupon analytics")
    
    def get_coupon_performance(self, coupon_id: str) -> Dict[str, Any]:
        """Get performance metrics for a specific coupon"""
        try:
            coupon = Coupon.objects.get(id=coupon_id)
            
            # Usage statistics
            usages = CouponUsage.objects.filter(coupon=coupon)
            total_uses = usages.count()
            total_points_awarded = usages.aggregate(
                total=Sum('points_awarded')
            )['total'] or 0
            
            # Usage over time
            usage_timeline = []
            for usage in usages.order_by('used_at')[:50]:  # Last 50 uses
                usage_timeline.append({
                    'used_at': usage.used_at,
                    'user_id': str(usage.user.id),
                    'points_awarded': usage.points_awarded
                })
            
            # Unique users
            unique_users = usages.values('user').distinct().count()
            
            return {
                'coupon_code': coupon.code,
                'coupon_name': coupon.name,
                'total_uses': total_uses,
                'total_points_awarded': total_points_awarded,
                'unique_users': unique_users,
                'usage_timeline': usage_timeline,
                'max_possible_uses': coupon.max_uses_per_user,
                'points_per_use': coupon.points_value
            }
            
        except Coupon.DoesNotExist:
            raise ServiceException(
                detail="Coupon not found",
                code="coupon_not_found"
            )
        except Exception as e:
            self.handle_service_error(e, "Failed to get coupon performance")
