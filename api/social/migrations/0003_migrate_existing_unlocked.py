# Generated by Django on 2025-01-16

from django.db import migrations


def mark_existing_as_claimed(apps, schema_editor):
    """Mark all existing unlocked achievements as claimed"""
    UserAchievement = apps.get_model('social', 'UserAchievement')

    # Get all unlocked achievements
    unlocked_achievements = UserAchievement.objects.filter(is_unlocked=True)

    # Mark them as claimed with claimed_at = unlocked_at
    updated_count = 0
    for achievement in unlocked_achievements:
        achievement.is_claimed = True
        achievement.claimed_at = achievement.unlocked_at
        achievement.save(update_fields=['is_claimed', 'claimed_at'])
        updated_count += 1

    print(f"Marked {updated_count} existing unlocked achievements as claimed")


def reverse_migration(apps, schema_editor):
    """Reverse the migration - mark all as unclaimed"""
    UserAchievement = apps.get_model('social', 'UserAchievement')

    # Reset all claimed achievements
    UserAchievement.objects.filter(is_claimed=True).update(
        is_claimed=False,
        claimed_at=None
    )


class Migration(migrations.Migration):

    dependencies = [
        ('social', '0002_add_claim_fields'),
    ]

    operations = [
        migrations.RunPython(mark_existing_as_claimed, reverse_migration),
    ]
