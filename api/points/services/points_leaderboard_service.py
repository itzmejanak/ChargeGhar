"""
PointsLeaderboardService - Individual Service File
============================================================

Service for points leaderboard

Auto-generated by Service Splitter
Date: 2025-10-15
"""

from __future__ import annotations

from typing import Dict, Any, List, Optional, TYPE_CHECKING
from django.utils import timezone
from django.db.models import Sum, Count
from api.common.services.base import BaseService
from api.points.models import PointsTransaction, Referral
from api.users.models import UserPoints

if TYPE_CHECKING:
    from api.users.models import User


class PointsLeaderboardService(BaseService):
    """Service for points leaderboard"""
    
    def get_points_leaderboard(self, limit: int = 10, include_user: User = None) -> List[Dict[str, Any]]:
        """Get points leaderboard - OPTIMIZED with bulk queries"""
        try:
            # Get top users by total points with optimized query
            top_users = UserPoints.objects.select_related('user').order_by('-total_points')[:limit]
            
            # Bulk fetch all required data to minimize database queries
            user_ids = [up.user.id for up in top_users]
            current_month_start = timezone.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
            
            # Bulk fetch monthly points
            monthly_points = dict(
                PointsTransaction.objects.filter(
                    user_id__in=user_ids,
                    transaction_type='EARNED',
                    created_at__gte=current_month_start
                ).values('user_id').annotate(total=Sum('points')).values_list('user_id', 'total')
            )
            
            # Bulk fetch referrals count
            referrals_count = dict(
                Referral.objects.filter(
                    inviter_id__in=user_ids,
                    status='COMPLETED'
                ).values('inviter_id').annotate(count=Count('id')).values_list('inviter_id', 'count')
            )
            
            # Bulk fetch rentals count (if Rental model exists)
            rentals_count = {}
            try:
                from api.rentals.models import Rental
                rentals_count = dict(
                    Rental.objects.filter(
                        user_id__in=user_ids,
                        status='COMPLETED'
                    ).values('user_id').annotate(count=Count('id')).values_list('user_id', 'count')
                )
            except ImportError:
                pass  # Rental model doesn't exist yet
            
            leaderboard = []
            for rank, user_points in enumerate(top_users, 1):
                leaderboard.append({
                    'rank': rank,
                    'user_id': str(user_points.user.id),
                    'username': user_points.user.username,
                    'total_points': user_points.total_points,
                    'current_points': user_points.current_points,
                    'points_this_month': monthly_points.get(user_points.user.id, 0),
                    'referrals_count': referrals_count.get(user_points.user.id, 0),
                    'rentals_count': rentals_count.get(user_points.user.id, 0)
                })
            
            # Include specific user if requested and not in top list
            if include_user:
                user_in_top = any(item['user_id'] == str(include_user.id) for item in leaderboard)
                if not user_in_top:
                    user_rank = self._get_user_rank(include_user)
                    if user_rank:
                        leaderboard.append(user_rank)
            
            return leaderboard
            
        except Exception as e:
            self.handle_service_error(e, "Failed to get points leaderboard")
    
    def _get_user_rank(self, user: User) -> Optional[Dict[str, Any]]:
        """Get specific user's rank in leaderboard"""
        try:
            user_points = UserPoints.objects.get(user=user)
            
            # Count users with higher total points
            higher_ranked = UserPoints.objects.filter(
                total_points__gt=user_points.total_points
            ).count()
            
            rank = higher_ranked + 1
            
            # Get additional stats
            current_month_start = timezone.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
            points_this_month = PointsTransaction.objects.filter(
                user=user,
                transaction_type='EARNED',
                created_at__gte=current_month_start
            ).aggregate(total=Sum('points'))['total'] or 0
            
            referrals_count = Referral.objects.filter(
                inviter=user,
                status='COMPLETED'
            ).count()
            
            from api.rentals.models import Rental
            rentals_count = Rental.objects.filter(
                user=user,
                status='COMPLETED'
            ).count()
            
            return {
                'rank': rank,
                'user_id': str(user.id),
                'username': user.username,
                'total_points': user_points.total_points,
                'current_points': user_points.current_points,
                'points_this_month': points_this_month,
                'referrals_count': referrals_count,
                'rentals_count': rentals_count
            }
            
        except UserPoints.DoesNotExist:
            return None
        except Exception as e:
            self.log_error(f"Failed to get user rank: {str(e)}")
            return None
