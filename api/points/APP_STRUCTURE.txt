══════════════════════════════════════════════════════════════════════
📦 APP: points
══════════════════════════════════════════════════════════════════════

📄 VIEWS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
api/points/views/
├── __init__.py                # Router merge
├── points_views.py            # Core points functionality - history, summary, and leaderboard (3 classes)
│   ├── PointsHistoryView
│   ├── PointsSummaryView
│   └── PointsLeaderboardView
└── referrals_views.py         # Referral system - codes, validation, claims, and user referrals (4 classes)
    ├── UserReferralCodeView
    ├── ReferralValidationView
    ├── ReferralClaimView
    └── UserReferralsView

Total: 2 files, 7 view classes

⚙️  SERVICES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
api/points/services/
├── __init__.py                    # Exports
├── points_api.py                  # 🎯 Points API - Universal Points Operations
============================================

Simple, universal API for points operations.
Works for ANY scenario - no app-specific assumptions!

Usage:
    from api.points.services import award_points, deduct_points
    
    # Sync (immediate)
    award_points(user, 50, 'RENTAL', 'Completed rental')
    
    # Async (background)
    award_points(user, 50, 'RENTAL', 'Completed rental', async_send=True)
├── points_leaderboard_service.py  # PointsLeaderboardService - Individual Service File
============================================================

Service for points leaderboard

Auto-generated by Service Splitter
Date: 2025-10-15
│   └── PointsLeaderboardService
│       ├── get_points_leaderboard()
│       └── _get_user_rank()
├── points_service.py              # PointsService - Individual Service File
============================================================

Service for points operations

Auto-generated by Service Splitter
Date: 2025-10-15
│   └── PointsService
│       ├── get_or_create_user_points()
│       ├── award_points()
│       ├── deduct_points()
│       ├── adjust_points()
│       ├── get_points_history()
│       ├── get_points_summary()
│       ├── _get_referral_stats()
│       └── bulk_award_points()
└── referral_service.py            # ReferralService - Individual Service File
============================================================

Service for referral operations

Auto-generated by Service Splitter
Date: 2025-10-15
    └── ReferralService
        ├── validate_referral_code()
        ├── create_referral()
        ├── complete_referral()
        ├── get_user_referrals()
        ├── get_referral_analytics()
        └── expire_old_referrals()

Total: 4 files, 3 service classes, 16 methods

📋 SERIALIZERS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
api/points/serializers.py          # Single file (339 lines)
├── User Serializers
│   ├── UserPointsSerializer
│   ├── UserReferralCodeResponseSerializer
│   ├── UserReferralsResponseSerializer
│   └── UserReferralsDataSerializer
├── Payment Serializers
│   ├── PointsTransactionListSerializer
│   └── PointsTransactionDetailSerializer
├── Point Serializers
│   ├── ReferralListSerializer
│   ├── ReferralDetailSerializer
│   ├── ReferralCodeValidationSerializer
│   ├── ReferralClaimSerializer
│   ├── PointsHistoryFilterSerializer
│   ├── PointsSummarySerializer
│   ├── PointsLeaderboardListSerializer
│   ├── PointsLeaderboardDetailSerializer
│   ├── PointsHistoryResponseSerializer
│   ├── PointsSummaryResponseSerializer
│   ├── ReferralValidationResponseSerializer
│   ├── ReferralClaimResponseSerializer
│   ├── PointsLeaderboardResponseSerializer
│   ├── PointsHistoryDataSerializer
│   └── ReferralCodeDataSerializer
└── Other Serializers
    ├── ValidationDataSerializer
    └── ClaimDataSerializer

Total: 1 file, 23 serializers (4 categories)
