docker compose exec api python manage.py shell -c "
from django.conf import settings
print('JWT Config:')
print(f'  Issuer: {settings.SIMPLE_JWT[\"ISSUER\"]}')
print(f'  Access Token: {settings.SIMPLE_JWT[\"ACCESS_TOKEN_LIFETIME\"]}')
print(f'  Algorithm: {settings.SIMPLE_JWT[\"ALGORITHM\"]}')
print(f'  Signing Key Length: {len(settings.SIMPLE_JWT[\"SIGNING_KEY\"])} chars')
print(f'  User ID Field: {settings.SIMPLE_JWT[\"USER_ID_FIELD\"]}')
print(f'  User ID Claim: {settings.SIMPLE_JWT[\"USER_ID_CLAIM\"]}')
"

docker compose exec api python manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()
admin = User.objects.filter(is_staff=True).first()
if admin:
    print(f'✅ Admin found: {admin.email} (is_staff={admin.is_staff}, is_superuser={admin.is_superuser})')
    print(f'   ID: {admin.id} (type: {type(admin.id)})')
    print(f'   Status: {admin.status}')
    print(f'   Active: {admin.is_active}')
else:
    print('❌ No admin users found')
"


docker compose exec api python manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()
print('User model fields:')
for field in User._meta.fields:
    if field.name == 'id':
        print(f'  ID field: {field.name} -> {field.__class__.__name__}')
        print(f'  Primary key: {field.primary_key}')
        print(f'  Auto created: {field.auto_created}')
        break
"

docker compose exec api python manage.py shell -c "
from django.contrib.auth import get_user_model
from rest_framework_simplejwt.tokens import RefreshToken

User = get_user_model()
admin = User.objects.filter(is_staff=True).first()
if admin:
    refresh = RefreshToken.for_user(admin)
    access_token = str(refresh.access_token)
    
    print('✅ Token generated successfully')
    print(f'Token length: {len(access_token)} chars')
    print(f'Access Token: {access_token}')
    
    # Decode token to verify payload
    import jwt
    from django.conf import settings
    
    payload = jwt.decode(access_token, options={'verify_signature': False})
    print(f'Token payload:')
    for key, value in payload.items():
        print(f'  {key}: {value}')
else:
    print('❌ No admin user to generate token for')
"


docker compose exec api python manage.py shell -c "
import jwt
from django.conf import settings

token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzYzNDU2MTEyLCJpYXQiOjE3NjA4NjQxMTIsImp0aSI6Ijk1MjZhNzIwOTc1NDQ5ZGI5OTI0MGU0Y2QyOTU5NjQ3IiwidXNlcl9pZCI6IjEiLCJpc3MiOiJDaGFyZ2VHaGFyLUFQSSJ9.0rsd1PlIP9YCEytSbKIetmh0V9hEEiMMXWL3DoJfOXs'

try:
    payload = jwt.decode(
        token,
        settings.SIMPLE_JWT['SIGNING_KEY'],
        algorithms=[settings.SIMPLE_JWT['ALGORITHM']],
        issuer=settings.SIMPLE_JWT['ISSUER']
    )
    print('✅ Token Valid')
    print(f'User ID: {payload[\"user_id\"]}')
    print(f'Expires: {payload[\"exp\"]}')
    print(f'Issuer: {payload[\"iss\"]}')
except Exception as e:
    print(f'❌ Token Invalid: {e}')
"


docker compose exec api python manage.py shell -c "
from rest_framework_simplejwt.authentication import JWTAuthentication
from rest_framework.test import APIRequestFactory
from django.contrib.auth import get_user_model

# Create a test request
factory = APIRequestFactory()
token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzYzNDU2MTEyLCJpYXQiOjE3NjA4NjQxMTIsImp0aSI6Ijk1MjZhNzIwOTc1NDQ5ZGI5OTI0MGU0Y2QyOTU5NjQ3IiwidXNlcl9pZCI6IjEiLCJpc3MiOiJDaGFyZ2VHaGFyLUFQSSJ9.0rsd1PlIP9YCEytSbKIetmh0V9hEEiMMXWL3DoJfOXs'

# Create request with Authorization header
request = factory.get('/test/', HTTP_AUTHORIZATION=f'Bearer {token}')

# Test authentication
auth = JWTAuthentication()
try:
    user, validated_token = auth.authenticate(request)
    print(f'✅ Authentication SUCCESS: {user} (is_staff: {user.is_staff})')
    print(f'   User ID: {user.id}')
    print(f'   Token type: {type(validated_token)}')
except Exception as e:
    print(f'❌ Authentication FAILED: {e}')
"


docker compose exec api python manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()

print('Admin users:')
for user in User.objects.filter(is_staff=True):
    print(f'  Email: {user.email}')
    print(f'  Username: {user.username}')
    print(f'  Has usable password: {user.has_usable_password()}')
    print(f'  Is active: {user.is_active}')
    print('---')

# Let's set a password for the admin user if it doesn't have one
admin = User.objects.filter(is_staff=True).first()
if admin and not admin.has_usable_password():
    admin.set_password('admin123')
    admin.save()
    print(f'Password set for {admin.email}')
"

curl -X POST http://localhost:8010/api/admin/login \
  -H "Content-Type: application/json" \
  -d '{"email": "admin@test.com", "password": "admin123"}' \
  -w "\nStatus: %{http_code}\n"


  curl -X GET http://localhost:8010/api/admin/content/analytics \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzYzNDU3MTA0LCJpYXQiOjE3NjA4NjUxMDQsImp0aSI6Ijk1ZjA2NzAxYTUyYjQ5Mjk4N2E0MDMzNDFiNTNlMGMwIiwidXNlcl9pZCI6IjQiLCJpc3MiOiJDaGFyZ2VHaGFyLUFQSSAgICJ9.2fhtLZHi9ZnTsY6HNKHCmKcTdB3D_HnrsGhaA6rTpXA" \
  -w "\nStatus: %{http_code}\n"