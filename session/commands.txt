when you change .env file
-------------------------------------------------------------------------------
docker-compose up -d --force-recreate



docker-compose logs migrations --follow
docker-compose up -d migrations
docker-compose up -d
docker-compose build migrations
docker-compose run --rm migrations python manage.py makemigrations <appname>
docker-compose up migrations
docker-compose run --rm migrations python manage.py check
docker-compose run --rm migrations python manage.py check --deploy
docker-compose run --rm migrations python manage.py createsuperuser --username admin --email admin@example.com --noinput  
docker-compose up -d api
docker-compose logs api --tail=20
docker-compose ps
docker-compose restart api

docker-compose run --rm migrations python -c "import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'api.config.settings'); import django; django.setup(); from django.contrib.auth import get_user_model; User = get_user_model(); user = User.objects.get(username='janak'); user.set_password('5060'); user.save(); print('Password set successfully')"
docker-compose run --rm migrations python manage.py flush --noinput


docker-compose run --rm migrations python manage.py shell -c "from api.stations.models import Station; print('Existing stations:'); [print(f'- {s.station_name} ({s.serial_number})') for s in Station.objects.all()]"
docker-compose run --rm migrations python manage.py shell -c "from api.stations.models import Station; [print(f'{s.station_name}: {s.id}') for s in Station.objects.all()]"
docker-compose run --rm migrations python manage.py 
shell -c "from api.stations.models import *; print('Amenities:', [a.name for a in StationAmenity.objects.all()]); print('Slots:', StationSlot.objects.count()); print('PowerBanks:', PowerBank.objects.count())"

docker-compose run --rm migrations python manage.py loaddata api/notifications/fixtures/notifications.json

docker-compose exec api python manage.py makemigrations points
docker-compose exec api python manage.py check --deploy
docker-compose exec api python manage.py spectacular --color --file schema.yml
docker-compose exec api uv sync

docker-compose uv run manage.py loaddata api/notifications/fixtures/notifications.json

docker-compose exec api python manage.py migrate



# Git Related Commands 

git branch --show-current
git branch -a
git diff --stat HEAD origin/rohan
git pull origin rohan
git push origin main







cd /opt/powerbank

# Stash local changes and pull latest
git stash
git pull origin main

# The script will now work perfectly
chmod +x deploy-production.sh
./deploy-production.sh






netstat -tlnp | grep :8010
docker ps --filter "publish=8010"

docker stop <container_id>
docker rm <container_id>

eg:
docker stop powerbank_local-powerbank_api-1
docker rm powerbank_local-powerbank_api-1




# Stop all containers except iotdemo ones
docker ps -q | grep -v "$(docker ps -qf name=iotdemo-app-prod)" | grep -v "$(docker ps -qf name=iotdemo-redis-prod)" | xargs -r docker stop

# Remove all stopped containers
docker ps -a -q | grep -v "$(docker ps -qf name=iotdemo-app-prod)" | grep -v "$(docker ps -qf name=iotdemo-redis-prod)" | xargs -r docker rm


docker image prune -a
docker ps
docker images


cd /opt/powerbank

# Stash local changes and pull latest
git stash
git pull origin main

# The script will now work perfectly
chmod +x deploy-production.sh
./deploy-production.sh




üîß To Check if Fixtures Loaded:
# Check if data exists in database
docker-compose -f docker-compose.prod.yml exec powerbank_api python manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()
print(f'Users: {User.objects.count()}')

from api.stations.models import Station
print(f'Stations: {Station.objects.count()}')
"

docker-compose exec api python manage.py spectacular --color --file openapi-schema.json

docker-compose exec api python manage.py shell -c "from django.db import connection; cursor = connection.cursor(); cursor.execute('SELECT table_name FROM information_schema.tables WHERE table_schema = %s', ['public']); print([row[0] for row in cursor.fetchall()])"



docker exec powerbank_production-powerbank_api-1 python manage.py shell -c " # Clear the account lock (django-axes) from axes.models import AccessAttempt AccessAttempt.objects.filter(username='janak').delete() print('‚úÖ Account lock cleared for janak') # Set password for admin user from django.contrib.auth import get_user_model User = get_user_model() admin_user = User.objects.get(username='janak') admin_user.set_password('PowerBank@2024') admin_user.save() print('‚úÖ Password set for admin user') print('üåê Django Admin: https://main.chargeghar.com/admin/') print('üë§ Username: janak') print('üîë Password: PowerBank@2024') print('') print('üìß Email (for OTP): janak@powerbank.com') print('üîê OTP flow still works for API authentication') "





docker exec powerbank_local_api_1 python manage.py shell -c "
# Clear ALL axes locks for the admin user
from axes.models import AccessAttempt, AccessLog
from django.contrib.auth import get_user_model

# Clear by username
AccessAttempt.objects.filter(username='janak').delete()
AccessLog.objects.filter(username='janak').delete()

# Clear by email (in case it's locked by email)
AccessAttempt.objects.filter(username='janak@powerbank.com').delete()
AccessLog.objects.filter(username='janak@powerbank.com').delete()

# Clear by IP (if locked by IP)
AccessAttempt.objects.all().delete()
AccessLog.objects.all().delete()

print('‚úÖ All axes locks cleared')

# Verify admin user exists and has password
User = get_user_model()
try:
    admin_user = User.objects.get(username='janak')
    print(f'‚úÖ Admin user found: {admin_user.username}')
    print(f'   Email: {admin_user.email}')
    print(f'   Is staff: {admin_user.is_staff}')
    print(f'   Is superuser: {admin_user.is_superuser}')
    print(f'   Has usable password: {admin_user.has_usable_password()}')
    
    # Set password again to be sure
    admin_user.set_password('PowerBank@2024')
    admin_user.save()
    print('‚úÖ Password reset successfully')
    
except User.DoesNotExist:
    print('‚ùå Admin user not found')
"


curl -s https://raw.githubusercontent.com/polymorphisma/nepal-gateways/main/README.md
curl -s https://raw.githubusercontent.com/polymorphisma/nepal-gateways/main/docs/EsewaClient.md
curl -s https://raw.githubusercontent.com/polymorphisma/nepal-gateways/main/docs/KhaltiClient.md

python3 -m venv /tmp/nepal_env && /tmp/nepal_env/bin/pip install nepal-gateways==0.2.0
/tmp/nepal_env/bin/python -c "import nepal_gateways; print(nepal_gateways.__file__)"
/tmp/nepal_env/lib/python3.12/site-packages/nepal_gateways/__init__.py
find /tmp/nepal_env/lib/python3.12/site-packages/nepal_gateways -name "*.py" | head -10
cat /tmp/nepal_env/lib/python3.12/site-packages/nepal_gateways/__init__.py
cat /tmp/nepal_env/lib/python3.12/site-packages/nepal_gateways/esewa/client.py
cat /tmp/nepal_env/lib/python3.12/site-packages/nepal_gateways/khalti/client.py
cat /tmp/nepal_env/lib/python3.12/site-packages/nepal_gateways/esewa/config.py
cat /tmp/nepal_env/lib/python3.12/site-packages/nepal_gateways/core/base.py